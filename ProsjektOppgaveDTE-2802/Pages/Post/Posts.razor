@page "/posts/{BlogId}"
@inject IJSRuntime JsRuntime

<h3>Posts</h3>

@if (_posts == null) 
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var post in _posts)
    {
        <div class="card" style="width: 30rem;">
            <div class="card-body">
                <div class="row">
                    <div class="col-sm-6">
                        <h2 class="card-title">@post.Title</h2>
                    </div>
                    <div class="col-sm-2">
                        <a href="post/@post.PostId" class="btn btn-primary">Edit</a>
                    </div>
                    <div class="col-sm-2">
                        <a class="btn btn-danger" @onclick="@(_ => ConfirmDelete(post.PostId))">Delete</a>
                    </div>
                </div>
                <p class="card-text">@post.Content</p>
                <a class="btn btn-primary" href="comments/@post.PostId">See Post</a>
            </div>
        </div><br/>
    }
}

<a class="btn btn-primary" href="post/create/@BlogId">Create Post</a>

@code {
    [Parameter]
    public string? BlogId { get; set; }
    private Post[]? _posts;

    protected override async Task OnInitializedAsync()
    {
        _posts = await HttpClient.GetFromJsonAsync<Post[]>($"/api/Post?blogId={BlogId}");
    }

    private async Task DeletePost(int id)
    {
        await HttpClient.DeleteAsync($"/api/Post/{id}");
        NavigationManager.NavigateTo($"/posts/{BlogId}", true);
    }
    
    private async Task ConfirmDelete(int id)
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this post?");
        if (confirmed)
        {
            await DeletePost(id);
        }
    }
}
