@page "/comments/{PostId:int}"
@using Microsoft.AspNetCore.SignalR.Client
@inject IJSRuntime JsRuntime
@implements IAsyncDisposable

<h3>Comments</h3>

@if (_comments == null) 
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table" >
        <thead>
        <tr>
            <th>Text</th>
            <th>Owner</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var comment in _comments)
        {
            <tr>
                <td>@comment.Text</td>
                <td>@comment.Owner.Email</td>
                <td><a class="btn btn-secondary" href="comment/@comment.CommentId">Edit</a></td>
                <td><a class="btn btn-danger" @onclick="@(_ =>ConfirmDelete(comment.CommentId))" disabled="@(!IsConnected)">Delete</a></td>
            </tr>
        }
        </tbody>
    </table>
    
    <EditForm Model="@_comment" OnValidSubmit="AddComment">
        <DataAnnotationsValidator/>
        <div class="form-group">
            <div>
                <InputText class="form-control" placeholder="Write new comment here..." @bind-Value="_comment.Text" />
                <ValidationMessage For="@(()=>_comment.Text)" />
            </div>

            <br/><button class="btn btn-primary" disabled="@(!IsConnected)" type="submit">Create Comment</button>
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int PostId { get; set; }
    private Comment[]? _comments;
    private HubConnection? _hubConnection;
    private readonly CommentViewModel _comment = new();

    
    // HUB
    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/commentHub"))
            .Build();

        _hubConnection.On<Comment>("CommentAdded", comment =>
        {
            _comments = _comments.Concat(new[] { comment }).ToArray();
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<int>("CommentDeleted", commentId =>
        {
            _comments = _comments.Where(c => c.CommentId != commentId).ToArray();
            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
        
        _comments = await HttpClient.GetFromJsonAsync<Comment[]>($"/api/Comment?postId={PostId}");
    }
    
    private bool IsConnected =>
        _hubConnection?.State == HubConnectionState.Connected;
    
    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    
    // Comment methods
    private async Task AddComment()
    {
        if (_hubConnection is not null)
        {
            _comment.CommentId = 0;
            _comment.PostId = PostId;
            
            var response = await HttpClient.PostAsJsonAsync("/api/Comment", _comment);
            _comment.Text = "";
            if (response.IsSuccessStatusCode)
            {
                var newComment = await response.Content.ReadFromJsonAsync<Comment>();
                await _hubConnection.SendAsync("CommentAdded", newComment);
            }
        }
    }
    
    private async Task DeleteComment(int id)
    {
        if (_hubConnection is not null)
        {
            var response = await HttpClient.DeleteAsync($"/api/Comment/{id}");
            if (response.IsSuccessStatusCode)
            {
                await _hubConnection.SendAsync("CommentDeleted", id);
            }
        }
    }
    
    private async Task ConfirmDelete(int id)
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this post?");
        if (confirmed)
        {
            await DeleteComment(id);
        }
    }
}
